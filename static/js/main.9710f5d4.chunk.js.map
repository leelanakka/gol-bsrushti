{"version":3,"sources":["_src/gameOfLife.js","_src/util.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","initialGrid","generateWorld","generateNextWorld","getAliveCellsOfNextGeneration","filterInputs","cellCoordinates","getDimension","module","exports","nextGeneration","currGeneration","bounds","topLeft","_getDimension","bottomRight","height","width","filteredCurrentGeneration","filter","x","map","cell","grid","nextWorld","returnGrid","_getDimension2","horizontalCharacter","String","fromCharCode","verticalCharacter","isCoordinatesGreaterThanBoard","boardSize","checkRangeForNegativeNumbers","cartesian","set1","set2","resultSet","rowIndex","length","columnIndex","push","validNeighbors","possibleNeighbors","size","neighbour","predicate","checkGreaterThanBoard","bind","findingNeighbors","rowCoordinates","coloumnCoordinates","checkForAlive","totalAliveNeighbors","neighbors","isAlive","getCoordinates","initial","result","index","createRow","array","currRow","row","column","addSpaces","join","dashline","filler","Array","fill","text","undefined","aliveCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","aliveCell","value","err","return","initialWorld","slice","i","noOfAliveNeighbours","nextState","colomnIndex","rowCoordinate","columnCoordinate","list","some","element","result1","every","includes","result2","printBoard","board","concat","Cell","react_default","a","createElement","this","props","color","col","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","j","src_Cell","genCells","forEach","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9710f5d4.chunk.js","sourcesContent":["const {\n  initialGrid,\n  generateWorld,\n  generateNextWorld,\n  getAliveCellsOfNextGeneration,\n  filterInputs,\n  cellCoordinates,\n  getDimension\n} = require('./util.js'); \n\nconst nextGeneration = function(currGeneration,bounds) {\n  let {topLeft, bottomRight} = bounds;\n  let {height, width} = getDimension(bounds);\n  let filteredCurrentGeneration = currGeneration.filter((x) => filterInputs(x,cellCoordinates(bounds)));\n  filteredCurrentGeneration = filteredCurrentGeneration.map(cell => [cell[0]-topLeft[0],cell[1]-topLeft[1]]);\n  let grid = generateWorld(initialGrid(width,height),filteredCurrentGeneration);\n  let nextWorld = generateNextWorld(grid);\n  return getAliveCellsOfNextGeneration(nextWorld, height, width).map(cell => [cell[0]+topLeft[0],cell[1]+topLeft[1]]);\n};\n\nconst returnGrid = function(currGeneration, bounds) { \n  let {topLeft, bottomRight} = bounds;\n  let {height, width} = getDimension(bounds);\n  let filteredCurrentGeneration = currGeneration.filter((x) => filterInputs(x,cellCoordinates(bounds)));\n  filteredCurrentGeneration = filteredCurrentGeneration.map(cell => [cell[0]-topLeft[0],cell[1]-topLeft[1]]);\n  let grid = generateWorld(initialGrid(width,height),filteredCurrentGeneration);\n  let nextWorld = generateNextWorld(grid);\n  return nextWorld;\n};\n\nmodule.exports = { nextGeneration, returnGrid };\n","let horizontalCharacter = String.fromCharCode(9473);\nlet verticalCharacter = String.fromCharCode(9475);\nconst initialGrid = function(height,width) {\n  let grid = new Array(width).fill(height).map(x => new Array(x).fill(\" \"));\n  return grid;\n};\n\nconst isCoordinatesGreaterThanBoard = function(boardSize, cell) {\n  return (cell[0] < boardSize[0] && cell[1] < boardSize[1]);\n};\n\nconst generateWorld  = function(grid,aliveCells) {\n  for(let aliveCell of aliveCells) {\n    grid[aliveCell[0]][aliveCell[1]] = \"*\";\n  };\n  return grid;\n};\n\nconst predicate = function(cell, neighbour) {\n  return !(cell[0]==neighbour[0] && cell[1]==neighbour[1]);\n};\n\nconst checkRangeForNegativeNumbers = function(cell) {\n  return (cell[0] >= 0 && cell[1] >= 0);\n};\n\nconst cartesian = function(set1,set2) {\n  let resultSet = [];\n  for(let rowIndex = 0; rowIndex < set1.length; rowIndex++) {\n    for(let columnIndex = 0; columnIndex < set2.length; columnIndex++) {\n      resultSet.push([set1[rowIndex],set2[columnIndex]]);\n    };\n  };\n  return resultSet;\n};\n\nconst validNeighbors = function(possibleNeighbors, cell, size) {\n  let validNeighbors = possibleNeighbors.filter((neighbour) => predicate(cell, neighbour));\n  validNeighbors = validNeighbors.filter(checkRangeForNegativeNumbers);\n  let checkGreaterThanBoard = isCoordinatesGreaterThanBoard.bind(null,size);\n  validNeighbors = validNeighbors.filter(checkGreaterThanBoard);\n  return validNeighbors;\n};\n\nconst findingNeighbors = function(size, cell) {\n  let rowCoordinates = [cell[0]-1, cell[0], cell[0]+1];\n  let coloumnCoordinates = [cell[1]-1, cell[1], cell[1]+1];\n  let possibleNeighbors = cartesian(rowCoordinates, coloumnCoordinates);\n  let neighbors = validNeighbors(possibleNeighbors, cell, size);\n  return neighbors;\n};\n\nconst checkForAlive = function(grid, neighbour) {\n  return grid[neighbour[0]][neighbour[1]] == \"*\";\n};\n\nconst totalAliveNeighbors = function(cell, grid) {\n  let neighbors = findingNeighbors([grid.length,grid[0].length], cell);\n  let isAlive = checkForAlive.bind(null, grid);\n  let aliveNeighbor = neighbors.filter(isAlive);\n  return aliveNeighbor.length;\n};\n\nconst checkForNextGenration = function(currentCellState,neighbourLength) {\n  let rules = [\" \",\" \",currentCellState,\"*\",\" \",\" \",\" \",\" \",\" \"];\n  return rules[neighbourLength];\n};\n\nconst generateNextWorld  = function(initialWorld) {\n  let nextWorld = initialWorld.map(x=>x.slice());\n  for( let index = 0; index < initialWorld.length; index ++) {\n    for(let i = 0; i < initialWorld[0].length; i++ ) {\n      let noOfAliveNeighbours = totalAliveNeighbors([index,i],initialWorld);\n      let nextState = checkForNextGenration(initialWorld[index][i],noOfAliveNeighbours);\n      nextWorld[index][i] = nextState;\n    };\n  };\n  return nextWorld;\n}\n\nconst getAliveCellsOfNextGeneration = function(nextWorld,width,height) { \n  let result = [];\n  for(let rowIndex = 0; rowIndex < width; rowIndex++) {\n    for(let colomnIndex = 0; colomnIndex < height; colomnIndex++) {\n      if(nextWorld[rowIndex][colomnIndex] == \"*\") {\n        result.push([rowIndex,colomnIndex]);\n      };\n    };\n  };\n  return result;\n};\n\nconst getCoordinates = function(length, initial) { \n  let result = [];\n  for(let index = 0; index < length; index++ ) { \n    result.push(initial);\n    initial += 1;\n  };\n  return result;\n};\n\nconst filterInputs = function(array,list) { \n  return list.some((element) => {\n    let result1 = element.every(x=> array.includes(x));\n    let result2 = array.every(x=> element.includes(x));\n    return result1 && result2;\n  });\n};\n\nconst cellCoordinates = function(bounds){\n  let {height, width} = getDimension(bounds);\n  let rowCoordinate = getCoordinates(height, bounds.topLeft[0]);\n  let columnCoordinate = getCoordinates(width, bounds.topLeft[1]);\n  let result  = cartesian(rowCoordinate, columnCoordinate);\n  return result;\n};\n\nconst getDimension = function(bounds) { \n  return {\n    height : bounds.bottomRight[0]-bounds.topLeft[0]+1,\n    width : bounds.bottomRight[1]-bounds.topLeft[1]+1\n  }\n};\n\nconst printBoard = function(array){\n  let board = [];\n  let length = array[0].length;\n  if(array[0].length == 0){\n    return [\"\"];\n  }\n  board = board.concat(dashline(length));\n  for(let row = 0; row < array.length; row++){\n    board = board.concat(createRow(array[row], row));\n  };\n  return board.concat(dashline(length));\n};\n\nconst fillConsecutiveNumbersArray = function(limit){\n  let array = [];\n  for(let index = 0; index < limit ; index++){\n    array.push(index);\n  }\n  return array;\n};\n\nconst fillArray = function(filler){\n  return function(length) {\n    return new Array(length).fill(filler);\n  }\n};\n\nconst xAxis = function(length) { \n  let axis = fillConsecutiveNumbersArray(length).map(addSpaces).join(verticalCharacter);\n  axis = [verticalCharacter + axis + verticalCharacter]; \n  axis =  axis.concat(dashline(length));\n  return axis;\n};\n\nconst createRow = function(array, currRow){\n  let row = [];\n  let column = array.map(addSpaces).join(verticalCharacter);\n  let cell = verticalCharacter+ column +verticalCharacter;\n  row.push(cell);\n  return row;\n}\n\nconst dashline = function(length){\n  if(length==0){\n    return \"\";\n  };\n  return fillArray(horizontalCharacter)(length*4+1).join(\"\");\n};\n\nconst addSpaces = function(text){\n  if(text != undefined){\n    return \" \"+text+\" \";\n  };\n  return \"\";\n};\n\nmodule.exports = {\n  initialGrid,\n  isCoordinatesGreaterThanBoard,\n  generateWorld,\n  cartesian,\n  validNeighbors,\n  findingNeighbors,\n  checkForAlive,\n  totalAliveNeighbors,\n  generateNextWorld,\n  getAliveCellsOfNextGeneration,\n  cellCoordinates,\n  getDimension,\n  filterInputs,\n  printBoard\n};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}